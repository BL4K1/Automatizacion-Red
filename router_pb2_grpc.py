# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import router_pb2 as router__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in router_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class RouterServiceStub(object):
    """Servicio principal para operaciones en routers
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetConfig = channel.unary_unary(
                '/router.RouterService/GetConfig',
                request_serializer=router__pb2.ConfigRequest.SerializeToString,
                response_deserializer=router__pb2.ConfigResponse.FromString,
                _registered_method=True)
        self.GetInterfaces = channel.unary_unary(
                '/router.RouterService/GetInterfaces',
                request_serializer=router__pb2.RouterRequest.SerializeToString,
                response_deserializer=router__pb2.InterfacesResponse.FromString,
                _registered_method=True)
        self.GetRoutingTable = channel.unary_unary(
                '/router.RouterService/GetRoutingTable',
                request_serializer=router__pb2.RouterRequest.SerializeToString,
                response_deserializer=router__pb2.RoutingResponse.FromString,
                _registered_method=True)
        self.GetUsers = channel.unary_unary(
                '/router.RouterService/GetUsers',
                request_serializer=router__pb2.RouterRequest.SerializeToString,
                response_deserializer=router__pb2.UsersResponse.FromString,
                _registered_method=True)
        self.AddUser = channel.unary_unary(
                '/router.RouterService/AddUser',
                request_serializer=router__pb2.AddUserRequest.SerializeToString,
                response_deserializer=router__pb2.OperationResponse.FromString,
                _registered_method=True)
        self.DeleteUser = channel.unary_unary(
                '/router.RouterService/DeleteUser',
                request_serializer=router__pb2.DeleteUserRequest.SerializeToString,
                response_deserializer=router__pb2.OperationResponse.FromString,
                _registered_method=True)
        self.UpdateUserPassword = channel.unary_unary(
                '/router.RouterService/UpdateUserPassword',
                request_serializer=router__pb2.UpdateUserRequest.SerializeToString,
                response_deserializer=router__pb2.OperationResponse.FromString,
                _registered_method=True)
        self.ConfigureInterface = channel.unary_unary(
                '/router.RouterService/ConfigureInterface',
                request_serializer=router__pb2.InterfaceConfigRequest.SerializeToString,
                response_deserializer=router__pb2.OperationResponse.FromString,
                _registered_method=True)
        self.EnableInterface = channel.unary_unary(
                '/router.RouterService/EnableInterface',
                request_serializer=router__pb2.InterfaceRequest.SerializeToString,
                response_deserializer=router__pb2.OperationResponse.FromString,
                _registered_method=True)
        self.DisableInterface = channel.unary_unary(
                '/router.RouterService/DisableInterface',
                request_serializer=router__pb2.InterfaceRequest.SerializeToString,
                response_deserializer=router__pb2.OperationResponse.FromString,
                _registered_method=True)
        self.SetInterfaceIP = channel.unary_unary(
                '/router.RouterService/SetInterfaceIP',
                request_serializer=router__pb2.InterfaceIPRequest.SerializeToString,
                response_deserializer=router__pb2.OperationResponse.FromString,
                _registered_method=True)
        self.AddRoute = channel.unary_unary(
                '/router.RouterService/AddRoute',
                request_serializer=router__pb2.RouteRequest.SerializeToString,
                response_deserializer=router__pb2.OperationResponse.FromString,
                _registered_method=True)
        self.DeleteRoute = channel.unary_unary(
                '/router.RouterService/DeleteRoute',
                request_serializer=router__pb2.RouteRequest.SerializeToString,
                response_deserializer=router__pb2.OperationResponse.FromString,
                _registered_method=True)
        self.ExecuteCommand = channel.unary_unary(
                '/router.RouterService/ExecuteCommand',
                request_serializer=router__pb2.CommandRequest.SerializeToString,
                response_deserializer=router__pb2.CommandResponse.FromString,
                _registered_method=True)
        self.SaveConfig = channel.unary_unary(
                '/router.RouterService/SaveConfig',
                request_serializer=router__pb2.RouterRequest.SerializeToString,
                response_deserializer=router__pb2.OperationResponse.FromString,
                _registered_method=True)
        self.RebootRouter = channel.unary_unary(
                '/router.RouterService/RebootRouter',
                request_serializer=router__pb2.RouterRequest.SerializeToString,
                response_deserializer=router__pb2.OperationResponse.FromString,
                _registered_method=True)


class RouterServiceServicer(object):
    """Servicio principal para operaciones en routers
    """

    def GetConfig(self, request, context):
        """Operaciones de configuraciÃ³n
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInterfaces(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRoutingTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddUser(self, request, context):
        """Operaciones CRUD de usuarios
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUserPassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureInterface(self, request, context):
        """Operaciones CRUD de interfaces
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnableInterface(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableInterface(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetInterfaceIP(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddRoute(self, request, context):
        """Operaciones de rutas
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRoute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteCommand(self, request, context):
        """Comando personalizado
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveConfig(self, request, context):
        """Operaciones de sistema
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RebootRouter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RouterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConfig,
                    request_deserializer=router__pb2.ConfigRequest.FromString,
                    response_serializer=router__pb2.ConfigResponse.SerializeToString,
            ),
            'GetInterfaces': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInterfaces,
                    request_deserializer=router__pb2.RouterRequest.FromString,
                    response_serializer=router__pb2.InterfacesResponse.SerializeToString,
            ),
            'GetRoutingTable': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRoutingTable,
                    request_deserializer=router__pb2.RouterRequest.FromString,
                    response_serializer=router__pb2.RoutingResponse.SerializeToString,
            ),
            'GetUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUsers,
                    request_deserializer=router__pb2.RouterRequest.FromString,
                    response_serializer=router__pb2.UsersResponse.SerializeToString,
            ),
            'AddUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AddUser,
                    request_deserializer=router__pb2.AddUserRequest.FromString,
                    response_serializer=router__pb2.OperationResponse.SerializeToString,
            ),
            'DeleteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUser,
                    request_deserializer=router__pb2.DeleteUserRequest.FromString,
                    response_serializer=router__pb2.OperationResponse.SerializeToString,
            ),
            'UpdateUserPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUserPassword,
                    request_deserializer=router__pb2.UpdateUserRequest.FromString,
                    response_serializer=router__pb2.OperationResponse.SerializeToString,
            ),
            'ConfigureInterface': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureInterface,
                    request_deserializer=router__pb2.InterfaceConfigRequest.FromString,
                    response_serializer=router__pb2.OperationResponse.SerializeToString,
            ),
            'EnableInterface': grpc.unary_unary_rpc_method_handler(
                    servicer.EnableInterface,
                    request_deserializer=router__pb2.InterfaceRequest.FromString,
                    response_serializer=router__pb2.OperationResponse.SerializeToString,
            ),
            'DisableInterface': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableInterface,
                    request_deserializer=router__pb2.InterfaceRequest.FromString,
                    response_serializer=router__pb2.OperationResponse.SerializeToString,
            ),
            'SetInterfaceIP': grpc.unary_unary_rpc_method_handler(
                    servicer.SetInterfaceIP,
                    request_deserializer=router__pb2.InterfaceIPRequest.FromString,
                    response_serializer=router__pb2.OperationResponse.SerializeToString,
            ),
            'AddRoute': grpc.unary_unary_rpc_method_handler(
                    servicer.AddRoute,
                    request_deserializer=router__pb2.RouteRequest.FromString,
                    response_serializer=router__pb2.OperationResponse.SerializeToString,
            ),
            'DeleteRoute': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRoute,
                    request_deserializer=router__pb2.RouteRequest.FromString,
                    response_serializer=router__pb2.OperationResponse.SerializeToString,
            ),
            'ExecuteCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteCommand,
                    request_deserializer=router__pb2.CommandRequest.FromString,
                    response_serializer=router__pb2.CommandResponse.SerializeToString,
            ),
            'SaveConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveConfig,
                    request_deserializer=router__pb2.RouterRequest.FromString,
                    response_serializer=router__pb2.OperationResponse.SerializeToString,
            ),
            'RebootRouter': grpc.unary_unary_rpc_method_handler(
                    servicer.RebootRouter,
                    request_deserializer=router__pb2.RouterRequest.FromString,
                    response_serializer=router__pb2.OperationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'router.RouterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('router.RouterService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RouterService(object):
    """Servicio principal para operaciones en routers
    """

    @staticmethod
    def GetConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/router.RouterService/GetConfig',
            router__pb2.ConfigRequest.SerializeToString,
            router__pb2.ConfigResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetInterfaces(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/router.RouterService/GetInterfaces',
            router__pb2.RouterRequest.SerializeToString,
            router__pb2.InterfacesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRoutingTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/router.RouterService/GetRoutingTable',
            router__pb2.RouterRequest.SerializeToString,
            router__pb2.RoutingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/router.RouterService/GetUsers',
            router__pb2.RouterRequest.SerializeToString,
            router__pb2.UsersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/router.RouterService/AddUser',
            router__pb2.AddUserRequest.SerializeToString,
            router__pb2.OperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/router.RouterService/DeleteUser',
            router__pb2.DeleteUserRequest.SerializeToString,
            router__pb2.OperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateUserPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/router.RouterService/UpdateUserPassword',
            router__pb2.UpdateUserRequest.SerializeToString,
            router__pb2.OperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConfigureInterface(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/router.RouterService/ConfigureInterface',
            router__pb2.InterfaceConfigRequest.SerializeToString,
            router__pb2.OperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EnableInterface(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/router.RouterService/EnableInterface',
            router__pb2.InterfaceRequest.SerializeToString,
            router__pb2.OperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DisableInterface(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/router.RouterService/DisableInterface',
            router__pb2.InterfaceRequest.SerializeToString,
            router__pb2.OperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetInterfaceIP(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/router.RouterService/SetInterfaceIP',
            router__pb2.InterfaceIPRequest.SerializeToString,
            router__pb2.OperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddRoute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/router.RouterService/AddRoute',
            router__pb2.RouteRequest.SerializeToString,
            router__pb2.OperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteRoute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/router.RouterService/DeleteRoute',
            router__pb2.RouteRequest.SerializeToString,
            router__pb2.OperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/router.RouterService/ExecuteCommand',
            router__pb2.CommandRequest.SerializeToString,
            router__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SaveConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/router.RouterService/SaveConfig',
            router__pb2.RouterRequest.SerializeToString,
            router__pb2.OperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RebootRouter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/router.RouterService/RebootRouter',
            router__pb2.RouterRequest.SerializeToString,
            router__pb2.OperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
